name = "gimletlet"
target = "thumbv7em-none-eabihf"
board = "gimletlet-2"
chip = "../../chips/stm32h7"
memory = "memory-large.toml"
stacksize = 896
epoch = 0
version = 0

[kernel]
name = "gimletlet"
requires = {flash = 32768, ram = 8192}

[tasks.jefe]
name = "task-jefe"
priority = 0
max-sizes = {flash = 8192, ram = 2048}
start = true
features = ["itm"]
stacksize = 1536
notifications = ["fault", "timer"]

[tasks.jefe.config.allowed-callers]
set_reset_reason = ["sys"]
request_reset = ["hiffy"]

[tasks.sys]
name = "drv-stm32xx-sys"
features = ["h753"]
priority = 1
max-sizes = {flash = 2048, ram = 1024}
uses = ["rcc", "gpios1", "gpios2", "gpios3", "system_flash"]
start = true
task-slots = ["jefe"]

[tasks.i2c_driver]
name = "drv-stm32xx-i2c-server"
features = ["h753", "itm"]
priority = 2
max-sizes = {flash = 16384, ram = 2048}
uses = ["i2c2", "i2c3", "i2c4"]
start = true
task-slots = ["sys"]
notifications = ["i2c2-irq", "i2c3-irq", "i2c4-irq"]

[tasks.i2c_driver.interrupts]
"i2c2.event" = "i2c2-irq"
"i2c2.error" = "i2c2-irq"
"i2c3.event" = "i2c3-irq"
"i2c3.error" = "i2c3-irq"
"i2c4.event" = "i2c4-irq"
"i2c4.error" = "i2c4-irq"

[tasks.user_leds]
name = "drv-user-leds"
features = ["stm32h7"]
priority = 5
max-sizes = {flash = 2048, ram = 1024}
start = true
task-slots = ["sys"]

[tasks.overflow]
name = "task-overflow"
priority = 8
max-sizes = {flash = 8192, ram = 8192}
stacksize = 2192
start = true

[tasks.hiffy]
name = "task-hiffy"
features = ["h753", "stm32h7", "itm", "i2c", "gpio"]
priority = 7
max-sizes = {flash = 32768, ram = 32768}
stacksize = 2048
start = true
task-slots = ["i2c_driver", "sys", "user_leds"]

[tasks.validate]
name = "task-validate"
priority = 3
max-sizes = {flash = 32768, ram = 4096}
stacksize = 1024
start = true
task-slots = ["i2c_driver"]

[tasks.idle]
name = "task-idle"
priority = 9
max-sizes = {flash = 128, ram = 256}
stacksize = 256
start = true

[config]
[[config.i2c.controllers]]
controller = 2

[[config.i2c.controllers.ports.F.pins]]
pins = [ 0, 1 ]
af = 4

[[config.i2c.controllers]]
controller = 3

#
# Note that I2C3 on Gimletlet is a bit unusual in that its SCL and SDA are on
# two different ports (port A and port C, respectively); we therefore have two
# pin structures for I2C3, but for purposes of the abstraction that i2c
# exports to consumers, we adhere to the convention outlined in the
# definition of `PortIndex` and name the logical port C after the GPIO pin that
# corresponds to SDA.
#
[[config.i2c.controllers.ports.C.pins]]
gpio_port = "A"
pins = [ 8 ]
af = 4

[[config.i2c.controllers.ports.C.pins]]
gpio_port = "C"
pins = [ 9 ]
af = 4

[[config.i2c.controllers]]
controller = 4

[[config.i2c.controllers.ports.F.pins]]
pins = [ 14, 15 ]
af = 4

[config.spi.spi3]
controller = 3

[config.spi.spi3.mux_options.port_c]
outputs = [
    # SPI3_SCK, SPI3_MOSI
    {port = "C", pins = [10, 12], af = 6},
]
# SPI3_MISO
input = {port = "C", pin = 11, af = 6}

[config.spi.spi3.devices.spi3_header]
mux = "port_c"
cs = [{port = "A", pin = 15}]
clock_divider = "DIV256" # 774 kHz, works with LPC55 clock at 48MHz
# clock_divider = "DIV128" # 1.5 MHz, fails unless LPC55 clock is at 96MHz

[config.spi.spi4]
controller = 4

[config.spi.spi4.mux_options.port_e]
outputs = [
    {port = "E", pins = [12, 14], af = 5},
]
input = {port = "E", pin = 13, af = 5}

[config.spi.spi4.devices.spi4_header]
mux = "port_e"
cs = [{port = "E", pin = 11}]

[config.net]
vlan = { start = 0x301, count = 2 }

[config.net.sockets.broadcast]
kind = "udp"
owner = {name = "udpbroadcast", notification = "socket"}
port = 997
tx = { packets = 3, bytes = 1024 }
rx = { packets = 3, bytes = 1024 }

[config.net.sockets.echo]
kind = "udp"
owner = {name = "udpecho", notification = "socket"}
port = 7
tx = { packets = 3, bytes = 1024 }
rx = { packets = 3, bytes = 1024 }

[config.net.sockets.rpc]
kind = "udp"
owner = {name = "udprpc", notification = "socket"}
port = 998
tx = { packets = 3, bytes = 1024 }
rx = { packets = 3, bytes = 1024 }

[config.net.sockets.control_plane_agent]
kind = "udp"
owner = {name = "control_plane_agent", notification = "socket"}
port = 11111 # TODO do we have a documented port for MGS traffic?
tx = { packets = 3, bytes = 2048 }
rx = { packets = 3, bytes = 2048 }

[config.sprot]
# TODO: This config is inert. Need to implement STM32 build.rs like the LPC55 has.
pins = [
    # ROT_IRQ (af=0 for GPIO, af=15 when EXTI is implemented)
    { name = "ROT_IRQ", pin = { port = "D", pin = 0, af = 0, direction = "input"}},
    # SPI6 CS repurposed for debugging
    { name = "DEBUG", pin = { port = "G", pin = 8, af = 0, direction = "output"}}
]
