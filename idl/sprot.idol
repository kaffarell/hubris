// SP to RoT communications over SPI

Interface(
    name: "SpRot",
    ops: {
        "status": (
            doc: "Return untrusted status from RoT",
            reply : Result(
              ok: "SprotStatus",
              err: Complex("SprotError"),
            ),
            encoding: Hubpack
        ),
        "io_stats": (
            doc: "Return IO stats from RoT",
            reply: Result(
                ok: "IoStats",
                err: Complex("SprotError"),
            ),
            encoding: Hubpack, 
        ),
        "pulse_cs": (
            doc: "SPI Chip Select assert, delay, deassert",
            args: {
                "delay": "u16",
            },
            reply: Result(
                ok: "PulseStatus",
                err: Complex("SprotError"),
            ),
            encoding: Hubpack, 
        ),

        // The RoT update API is copy and pasted from idl/update.idol.
        "block_size": (
            doc: "Get the block size for the update API. This is the length expected for the `write_one_block` call",
            args: { },
            reply: Result(
                ok: "usize",
                err: Complex("SprotError"),
            ),
            encoding: Hubpack, 
            idempotent: true,
        ),
        "prep_image_update": (
            doc: "Do any necessary preparation for writing the image. This may include erasing flash and unlocking registers",
            args: {
                "target": "UpdateTarget",
            },
            reply : Result(
                ok: "()",
                err: Complex("SprotError"),
            ),
            encoding: Hubpack, 
        ),
        "write_one_block": (
            doc: "Write a single block of an update image to the designated location.",
            args: { 
                "block_num" : "u32",
            },
            leases : {
                "block": (type: "[u8]", read: true, max_len: Some(1024)),
            },
            reply: Result (
                ok: "()",
                err: Complex("SprotError"),
            ),
            encoding: Hubpack, 
        ),
        "abort_update": (
            doc: "Cancel the current update in progress. Must call prep_image_update again before restarting.",
            args : { },
            reply : Result(
                ok: "()",
                err: Complex("SprotError"),
            ),
            encoding: Hubpack,
        ),
        "finish_image_update": (
            doc: "Do any necessary work post image write",
            args : { },
            reply : Result(
                ok: "()",
                err: Complex("SprotError"),
            ),
            encoding: Hubpack,
        ),
        "switch_default_image": (
            doc: "Prefer a specific image slot for one or many boots",
            args: {
                "slot": "SlotId",
                "duration": "SwitchDuration",
            },
            reply : Result(
                ok: "()",
                err: Complex("SprotError"),
            ),
            encoding: Hubpack,
            idempotent: true,
        ),
        "reset": (
            doc: "Reset",
            reply : Result(
                ok: "()",
                err: Complex("SprotError"),
            ),
            encoding: Hubpack,
            idempotent: true,
        ),
    }
)
